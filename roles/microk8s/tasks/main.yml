# vim: set ft=Ansible ts=2


# ================
# Pre-installation
# ================

- name: Install Snapd
  ansible.builtin.package:
    name: "snapd"
    state: present
  tags: [never, setup]


- name: Configure Snapd
  ansible.builtin.systemd:
    name: "snapd.socket"
    enabled: true
    state: restared
  when:
    - ansible_system | lower == "linux"
    - ansible_distribution | lower not in ["ubuntu"]
  tags: [never, setup]


- name: Configure ansible_hostname resolution
  ansible.builtin.lineinfile:
    path: "/etc/hosts"
    regexp: '{{ hostvars[__host].ansible_default_ipv4.address }}\s+{{ hostvars[__host].ansible_hostname }}'
    line: '{{ hostvars[__host].ansible_default_ipv4.address }} {{ hostvars[__host].ansible_hostname }}'
  loop: "{{ ansible_play_hosts }}"
  loop_control:
    loop_var: __host
  tags: [never, setup]


# ============
# Installation
# ============

- name: Get microk8s status # noqa risky-shell-pipe
  ansible.builtin.shell: >
    snap list 2&>/dev/null
    | grep microk8s
    | awk '{print $4}'
  register: _gms
  changed_when: false
  tags: [never, setup]


- name: Control MicroK8s version
  ansible.builtin.fail:
    msg: "Requested MicroK8s version ({{ jpclipffel_k8s_microk8s_channel }}) does not match installed version ({{ _gms.stdout }})"
  when:
    - _gms.stdout | length > 0
    - jpclipffel_k8s_microk8s_channel != _gms.stdout
  tags: [never, setup]


- name: Install MicroK8s
  community.general.snap:
    name: "microk8s"
    channel: "{{ jpclipffel_k8s_microk8s_channel }}"
    classic: true
    state: present
  tags: [never, setup]


- name: Install Python packages
  ansible.builtin.pip:
    name: "{{ jpclipffel_k8s_microk8s_python_deps }}"
    state: present
  tags: [never, setup]


- name: Start MicroK8s # noqa command-instead-of-shell
  ansible.builtin.shell:
    microk8s start
  changed_when: false
  tags: [never, setup]


- name: Wait for MicroK8s to be ready # noqa command-instead-of-shell
  ansible.builtin.shell:
    microk8s status --wait-ready
  changed_when: false
  tags: [never, setup]


- name: Setup MicroK8s DNS names
  ansible.builtin.lineinfile:
    path: "{{ jpclipffel_k8s_microk8s_dnsnames_path }}"
    line: "{{ __smdn.entry }} = {{ __smdn.host }}"
    insertafter: "^#MOREIPS$"
  with_items: "{{ jpclipffel_k8s_microk8s_dnsnames | reverse }}"
  loop_control:
    loop_var: __smdn
  register: __dns
  tags: [never, setup]


- name: Copy current MicroK8s CNI
  ansible.builtin.copy:
    remote_src: true
    mode: preserve
    src: "{{ jpclipffel_k8s_microk8s_root }}/args/cni-network/cni.yaml"
    dest: "{{ jpclipffel_k8s_microk8s_root }}/args/cni-network/cni-default.yaml"
  changed_when: false
  tags: [never, setup]


- name: Setup MicroK8s CNI
  ansible.builtin.replace:
    path: "{{ jpclipffel_k8s_microk8s_root }}/args/cni-network/cni.yaml"
    regexp: '( *- name: CALICO_IPV4POOL_CIDR\n)( *value: )(\".*\")'
    replace: "\\1\\2\"{{ jpclipffel_k8s_microk8s_cidr }}\""
  register: __cni
  tags: [never, setup]


- name: Reset MicroK8s CNI # noqa no-handler
  ansible.builtin.shell: |
    microk8s kubectl delete -f {{ jpclipffel_k8s_microk8s_root }}/args/cni-network/cni-default.yaml
  when:
    - __cni.changed
  failed_when: false
  changed_when: true
  tags: [never, setup]


- name: Setup MicroK8s CIDR
  ansible.builtin.replace:
    path: "{{ jpclipffel_k8s_microk8s_root }}/args/kube-proxy"
    regexp: "--cluster-cidr=.*"
    replace: "--cluster-cidr={{ jpclipffel_k8s_microk8s_cidr }}"
  register: __cidr
  tags: [never, setup]


- name: Restart MicroK8s # noqa no-handler
  ansible.builtin.shell: |
    microk8s stop;
    microk8s start;
    microk8s status --wait-ready
  register: _rmk8s
  until: "_rmk8s is not failed"
  retries: 5
  delay: 5
  throttle: 1
  when:
    - __dns.changed or __cni.changed or __cidr.changed or 'restart' in ansible_run_tags
  changed_when: true
  tags: [never, setup]


- name: Apply MicroK8s CNI # noqa no-handler
  ansible.builtin.shell: |
    microk8s kubectl apply -f {{ jpclipffel_k8s_microk8s_root }}/args/cni-network/cni.yaml
  register: _amc
  until: "_amc is not failed"
  retries: 5
  delay: 5
  changed_when: true
  when:
    - __cni.changed or __cidr.changed
  tags: [never, setup]


# ==========
# Clustering
# ==========

- name: Generate joining command # noqa risky-shell-pipe
  ansible.builtin.shell: >
    microk8s add-node --token-ttl 3600 --format short
    | head -n 1
  register: "__join_command"
  when:
    - ansible_play_hosts | length > 0
    - ansible_hostname == ansible_play_hosts[0]
  tags: [never, setup]


- name: Join cluster
  ansible.builtin.shell: |
    {{ hostvars[ansible_play_hosts[0]].__join_command.stdout }}
  register: "__join_result"
  failed_when:
    - __join_result.rc != 0 and "is already known" not in __join_result.stdout
  throttle: 1
  when:
    - ansible_play_hosts | length > 0
    - ansible_hostname != ansible_play_hosts[0]
    - __join_command.stdout is defined
  tags: [never, setup]


# ==================
# Live configuration
# ==================

- name: Enabling MicroK8s addons
  ansible.builtin.shell: |
    microk8s enable {{ __dmk8sa_item }} && sleep {{ jpclipffel_k8s_microk8s_addons_wait }}
  loop: "{{ jpclipffel_k8s_microk8s_addons }}"
  loop_control:
    loop_var: __dmk8sa_item
  changed_when: true
  when:
    - ansible_hostname == ansible_play_hosts[0]
  tags: [never, apply]


- name: Disable MicroK8s addons
  ansible.builtin.shell: |
    microk8s disable {{ __dmk8sa_item }}
  loop: "{{ jpclipffel_k8s_microk8s_addons }}"
  loop_control:
    loop_var: __dmk8sa_item
  changed_when: true
  when:
    - ansible_hostname == ansible_play_hosts[0]
  tags: [never, delete]


- name: Update node-local Kubeconfig # noqa deprecated-command-syntax
  ansible.builtin.shell: |
    mkdir ~/.kube; microk8s config > ~/.kube/config
  changed_when: true
  tags: [never, setup]


# ==============
# Data gathering
# ==============

- name: Collect MicroK8s kubeconfig
  ansible.builtin.shell: |
    microk8s config
  changed_when: false
  register: "__kubeconfig"
  when:
    - ansible_hostname == ansible_play_hosts[0]
  tags: [never, facts, stats, setup, apply]


- name: Set facts
  ansible.builtin.set_fact:
    kubeconfig: "{{ __kubeconfig.stdout }}"
  when:
    - ansible_hostname == ansible_play_hosts[0]
  tags: [never, facts, stats, setup, apply]


- name: Set stats
  ansible.builtin.set_stats:
    data:
      kubeconfig: "{{ __kubeconfig.stdout }}"
  when:
    - ansible_hostname == ansible_play_hosts[0]
  tags: [never, facts, stats, setup, apply]


# ==============
# Uninstallation
# ==============

- name: Uninstall MicroK8s
  community.general.snap:
    name: "microk8s"
    state: absent
  tags: [never, teardown, remove]
